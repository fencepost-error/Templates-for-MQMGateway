#!/bin/bash
# Build a mqmgateway config file from template files and apply it to
# modmqttd.  Arguments:
#
#	-d = debug mode, generate the config file without applying it.
#	-v = verbose mode, show each template generation.
#
# To control what goes into the config file, scroll down to the section
# with the comment '# Edit the following'.

HEADER_FILE="config_header.yaml"
OUTPUT_FILE="config.yaml"
DEBUG=0
VERBOSE=0

# Process any optional flags before the args.

while getopts "dv" options ; do
	case "${options}" in
		d) DEBUG=1 ;;
		v) VERBOSE=1 ;;
	esac
done
shift $(( OPTIND - 1 ))

# Check for common problems in template files.  Using a register value of 0
# is particularly problematic since it gets converted to -1, which makes the
# resulting error message look like it's an error return value from a
# libmodbus function.  Using invisible-to-the-editor tabs is also a problem,
# better to catch this at this stage than later when they're in the config
# file.

for file in *.yamlt ; do
	if [ "$(grep -c '^\s*register:\s*0\b' $file)" -gt 0 ] ; then
		echo "Template $file uses 0-based registers, should be 1-based" >&2 ;
		exit 1 ;
	fi
	if [ "$(grep -c $'\t' $file)" -gt 0 ] ; then
		echo "Template $file contains tab characters, should be spaces" >&2 ;
		exit 1 ;
	fi
done

# Create the header.  This performs DNS lookups on the named devices and
# inserts the corresponding IP addresses into the header for the config
# file

compile_header()
	{
	for DNSNAME in "$@" ; do

		# Get the IP address of the device.  This isn't very fancy, it just
		# returns the first one found without much checking on the assumption
		# that an embedded modbus gateway isn't going to be multihomed.
		IP_ADDRESS=$(dig +short "$DNSNAME" | head -n1)
		if [ -z "$IP_ADDRESS" ] ; then
			echo "No DNS entry for server $DNSNAME" >&2 ;
			exit 1 ;
		fi

		if [ $VERBOSE -eq 1 ] ; then
			echo "Setting address for ${DNSNAME} to ${IP_ADDRESS}" ;
		fi

		# Swap out the DNS name for the IP address
		sed -i s/"${DNSNAME}"/"${IP_ADDRESS}"/g ${OUTPUT_FILE}

	done
	}

# Create an output file from a template file.  This just strips comments
# and inserts the topic, network name, and address at the appropriate
# locations.

compile_template()
	{
	TEMPLATE_FILE=$1
	TOPIC=$2
	NETWORK=$3
	ADDRESS=$4

	if [ $VERBOSE -eq 1 ] ; then
		echo "Creating topic ${TOPIC} from template ${TEMPLATE_FILE}.yamlt" ;
	fi

	if [ ! -f "${TEMPLATE_FILE}".yamlt ] ; then
		echo "Template ${TEMPLATE_FILE}.yamlt not found" >&2 ;
		exit 1 ;
	fi

	cat "${TEMPLATE_FILE}".yamlt | sed '/^#/d' | sed s/XXXX/"${TOPIC}"/g | sed s/YYYY/"${NETWORK}"/g | sed s/ZZZZ/"${ADDRESS}"/g >> "${OUTPUT_FILE}"
	}

# "Compile" the input files into the config file.  The argument order
# is 'template_file topic_name network address'.

if [ -f ${OUTPUT_FILE} ] ; then
	rm ${OUTPUT_FILE} ;
fi
cp ${HEADER_FILE} ${OUTPUT_FILE}
echo "# Everything beyond this point is auto-generated by mkconfig.sh." >> "${OUTPUT_FILE}"
echo "# Any changes will be overwritten on the next rebuild." >> "${OUTPUT_FILE}"

#########################################################################
# Edit the following section to control what goes into the config file.
#########################################################################

compile_header outdoors.modbus.lan indoors.modbus.lan basement.modbus.lan

compile_template eastron grid indoors 10
compile_template eastron non_backup indoors 11
compile_template eastron backup indoors 12
compile_template eastron heating indoors 13
compile_template eastron hot_water indoors 14

compile_template waveshare_io waveshare_io indoors 20

compile_template pulse_count water indoors 21

compile_template temp_humid basement basement 10

compile_template temp_humid front_door outdoors 10
compile_template temp_humid back_door outdoors 11
compile_template temp_humid shed outdoors 12

compile_template water_level water_tank outdoors 20

#########################################################################
# End of user-defined configuration settings
#########################################################################

# If we're running in debug mode only, don't apply the changes

if [ $DEBUG -eq 1 ] ; then
	exit 0 ;
fi

# Install the new config file and restart modmqttd.  We need to pause
# for a second after the restart to allow modmqttd time to initialise.

sudo cp config.yaml /etc/modmqttd/config.yaml
sudo systemctl restart modmqttd
sleep 1
sudo systemctl status modmqttd | less
